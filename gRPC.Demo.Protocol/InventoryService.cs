// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: InventoryService.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GRPCDemo {

  /// <summary>Holder for reflection information generated from InventoryService.proto</summary>
  public static partial class InventoryServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for InventoryService.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InventoryServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZJbnZlbnRvcnlTZXJ2aWNlLnByb3RvEghnUlBDRGVtbyIkChBEZWR1Y3Rp",
            "b25SZXF1ZXN0EhAKCGF1YW50aXR5GAEgASgFIigKDkRlZHVjdGlvblJlcGx5",
            "EhYKDnRvdGFsSW52ZW50b3J5GAEgASgFIi8KG0dldEludmVudG9yeVF1YW50",
            "aXR5UmVxdWVzdBIQCghhdWFudGl0eRgBIAEoBSIzChlHZXRJbnZlbnRvcnlR",
            "dWFudGl0eVJlcGx5EhYKDnRvdGFsSW52ZW50b3J5GAEgASgFMrEBCgRnUlBD",
            "EkMKCURlZHVjdGlvbhIaLmdSUENEZW1vLkRlZHVjdGlvblJlcXVlc3QaGC5n",
            "UlBDRGVtby5EZWR1Y3Rpb25SZXBseSIAEmQKFEdldEludmVudG9yeVF1YW50",
            "aXR5EiUuZ1JQQ0RlbW8uR2V0SW52ZW50b3J5UXVhbnRpdHlSZXF1ZXN0GiMu",
            "Z1JQQ0RlbW8uR2V0SW52ZW50b3J5UXVhbnRpdHlSZXBseSIAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GRPCDemo.DeductionRequest), global::GRPCDemo.DeductionRequest.Parser, new[]{ "Auantity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GRPCDemo.DeductionReply), global::GRPCDemo.DeductionReply.Parser, new[]{ "TotalInventory" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GRPCDemo.GetInventoryQuantityRequest), global::GRPCDemo.GetInventoryQuantityRequest.Parser, new[]{ "Auantity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GRPCDemo.GetInventoryQuantityReply), global::GRPCDemo.GetInventoryQuantityReply.Parser, new[]{ "TotalInventory" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DeductionRequest : pb::IMessage<DeductionRequest> {
    private static readonly pb::MessageParser<DeductionRequest> _parser = new pb::MessageParser<DeductionRequest>(() => new DeductionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeductionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GRPCDemo.InventoryServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeductionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeductionRequest(DeductionRequest other) : this() {
      auantity_ = other.auantity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeductionRequest Clone() {
      return new DeductionRequest(this);
    }

    /// <summary>Field number for the "auantity" field.</summary>
    public const int AuantityFieldNumber = 1;
    private int auantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Auantity {
      get { return auantity_; }
      set {
        auantity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeductionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeductionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Auantity != other.Auantity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Auantity != 0) hash ^= Auantity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Auantity != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Auantity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Auantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Auantity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeductionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Auantity != 0) {
        Auantity = other.Auantity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Auantity = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeductionReply : pb::IMessage<DeductionReply> {
    private static readonly pb::MessageParser<DeductionReply> _parser = new pb::MessageParser<DeductionReply>(() => new DeductionReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeductionReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GRPCDemo.InventoryServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeductionReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeductionReply(DeductionReply other) : this() {
      totalInventory_ = other.totalInventory_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeductionReply Clone() {
      return new DeductionReply(this);
    }

    /// <summary>Field number for the "totalInventory" field.</summary>
    public const int TotalInventoryFieldNumber = 1;
    private int totalInventory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalInventory {
      get { return totalInventory_; }
      set {
        totalInventory_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeductionReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeductionReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalInventory != other.TotalInventory) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalInventory != 0) hash ^= TotalInventory.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalInventory != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TotalInventory);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalInventory != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalInventory);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeductionReply other) {
      if (other == null) {
        return;
      }
      if (other.TotalInventory != 0) {
        TotalInventory = other.TotalInventory;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalInventory = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetInventoryQuantityRequest : pb::IMessage<GetInventoryQuantityRequest> {
    private static readonly pb::MessageParser<GetInventoryQuantityRequest> _parser = new pb::MessageParser<GetInventoryQuantityRequest>(() => new GetInventoryQuantityRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetInventoryQuantityRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GRPCDemo.InventoryServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInventoryQuantityRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInventoryQuantityRequest(GetInventoryQuantityRequest other) : this() {
      auantity_ = other.auantity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInventoryQuantityRequest Clone() {
      return new GetInventoryQuantityRequest(this);
    }

    /// <summary>Field number for the "auantity" field.</summary>
    public const int AuantityFieldNumber = 1;
    private int auantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Auantity {
      get { return auantity_; }
      set {
        auantity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetInventoryQuantityRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetInventoryQuantityRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Auantity != other.Auantity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Auantity != 0) hash ^= Auantity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Auantity != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Auantity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Auantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Auantity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetInventoryQuantityRequest other) {
      if (other == null) {
        return;
      }
      if (other.Auantity != 0) {
        Auantity = other.Auantity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Auantity = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetInventoryQuantityReply : pb::IMessage<GetInventoryQuantityReply> {
    private static readonly pb::MessageParser<GetInventoryQuantityReply> _parser = new pb::MessageParser<GetInventoryQuantityReply>(() => new GetInventoryQuantityReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetInventoryQuantityReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GRPCDemo.InventoryServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInventoryQuantityReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInventoryQuantityReply(GetInventoryQuantityReply other) : this() {
      totalInventory_ = other.totalInventory_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInventoryQuantityReply Clone() {
      return new GetInventoryQuantityReply(this);
    }

    /// <summary>Field number for the "totalInventory" field.</summary>
    public const int TotalInventoryFieldNumber = 1;
    private int totalInventory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalInventory {
      get { return totalInventory_; }
      set {
        totalInventory_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetInventoryQuantityReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetInventoryQuantityReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalInventory != other.TotalInventory) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalInventory != 0) hash ^= TotalInventory.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalInventory != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TotalInventory);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalInventory != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalInventory);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetInventoryQuantityReply other) {
      if (other == null) {
        return;
      }
      if (other.TotalInventory != 0) {
        TotalInventory = other.TotalInventory;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalInventory = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
